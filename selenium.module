<?php

/**
 * @file
 * Selenium Drupal integration module.
 */

/**
 * Implements hook_form_alter().
 */
function selenium_form_simpletest_settings_form_alter(&$form, &$form_state) {
  // Get the default value, either from the form state or the Drupal variables.
  $url = selenium_settings_form_default_value('selenium_server_host', 'localhost:4444', $form_state);
  $form['selenium'] = array(
    '#type' => 'fieldset',
    '#title' => t('Selenium Settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  // The URL wrapper we need for the connection checker to auto-update.
  $form['selenium']['url_wrapper'] = array(
    '#prefix' => '<div id="selenium-url">',
    '#suffix' => '</div>',
    '#type' => 'markup',
  );
  // Includes a checker to see if the server has any issues.
  $confirmation_message = selenium_get_status_message($url);
  $form['selenium']['url_wrapper']['selenium_server_host'] = array(
    '#type' => 'textfield',
    '#title' => t('Selenium server host and port'),
    '#description' => t('The URL of the connection to Selenium web server. <br/> !confirmation_message', array(
      '!confirmation_message' => $confirmation_message)),
    '#default_value' => $url,
    '#ajax' => array(
      'callback' => 'selenium_update_div',
      'wrapper' => 'selenium-url',
      'effect' => 'fade',
      'event' => 'blur',
      'progress' => array('type' => 'throbber'),
    ),
  );
  // List of allowed browsers.
  // @TODO: This should be a lot more sensible than just "type e'm in!"
  $form['selenium']['selenium_allowed_browsers'] = array(
    '#type' => 'textarea',
    '#title' => t("Allowed Selenium Browsers"),
    '#description' => t("A list of permitted browsers for use by Selenium. These should be a comma-and-space-separated list of executable browsers available via \$PATH, e.g., 'firefix, chrome, opera, iexplorer'."),
    '#default_value' => variable_get('selenium_allowed_browsers', "firefox, chrome"),
  );
  $form['selenium']['selenium_verbose_logging'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable verbose WebDriver logging during tests'),
    '#description' => t("When enabled, this allows tests to pass back verbose results from Selenium WebDriver functions that were run successfully, but which are otherwise not necessarily useful to know about beyond debugging purposes."),
    '#default_value' => variable_get('selenium_verbose_logging', FALSE),
  );
}

/**
 * Creates a message to display on the Selenium host testing config section.
 *
 * @param string $url
 *   The URL to check.
 *
 * @return string
 *   The message to display.
 */
function selenium_get_status_message($url) {
  $response = selenium_get_server_status($url);
  // If no response is received, the status returns FALSE.
  if (!$response) {
    $message = theme_image(array('path' => 'misc/watchdog-error.png', 'attributes' => array()));
    $message .= t("No response received from !selenium_url", array('!selenium_url' => $url));
    return $message;
  }

  // If NULL is returned, the server did not respond with well-formed JSON.
  if ($response === NULL) {
    $message = theme_image(array('path' => 'misc/watchdog-error.png', 'attributes' => array()));
    $message .= t("Response from !selenium_url was not well-formed JSON.", array('!selenium_url' => $url));
    return $message;
  }

  // Otherwise, we're good to check for a status.
  $status = $response['status'];
  $version = $response['value']['build']['version'];

  // If the status wasn't 0, we have a problem.
  if ($status !== 0) {
    module_load_include('inc', 'selenium', 'includes/selenium_web_driver');
    $status_codes = SeleniumWebDriver::$statusCodes;
    $message = theme_image(array('path' => 'misc/watchdog-error.png', 'attributes' => array()));
    if (isset($status_codes[$status])) {
      $message .= t("Error !error_number encountered while trying to access the Selenium server !version at !selenium_url: !error", array(
        '!error_number' => $status,
        '!version' => $version,
        '!selenium_url' => $url,
        '!error' => $status_codes[$status],
      ));
      return $message;
    }
    // In case something ridiculous happened.
    else {
      $message .= t("Unknown error encountered while trying to access the Selenium server.");
      return $message;
    }
  }

  // Otherwise, we have smooth sailing.
  $message = theme_image(array('path' => 'misc/watchdog-ok.png', 'attributes' => array()));
  $message .= t('Successfully connected to Selenium server (version !version).', array(
    '!version' => $version));
  return $message;
}

/**
 * Returns the status of a Selenium server.
 *
 * @param string $url
 *   The URL of the server.
 *
 * @return bool|mixed
 *   Returns one of the following:
 *   FALSE if cURL failed to elicit a response from the server.
 *   NULL if a response was received but json_decode() failed to recognize it as
 *   properly-formed JSON.
 *   An array of decoded JSON if json_decode() recognized the response as well-
 *   formed JSON.
 */
function selenium_get_server_status($url) {
  // This is the path to check the server status.
  $url .= "/wd/hub/status";
  $curl = curl_init($url);
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($curl, CURLOPT_HTTPHEADER, array('Content-type: text/plain', 'Accept: application/json'));
  $response = curl_exec($curl);

  // If no response, return FALSE.
  if (!$response) {
    return FALSE;
  }

  // Otherwise, return the results from json_decode().
  return json_decode($response, TRUE);
}

/**
 * Updates the selenium-url div on the test settings form.
 *
 * @param array $form
 *   The test settings form.
 * @param array $form_state
 *   The state of the form.
 *
 * @return mixed
 *   The wrapper section of the form array.
 */
function selenium_update_div(array $form, array $form_state) {
  return $form['selenium']['url_wrapper'];
}

/**
 * Gets the current default value of the settings form.
 *
 * Handles the case where the current form state is different than the loaded
 * form state.
 *
 * @param string $name
 *   The name of the value to check.
 * @param string $default_value
 *   The default value of the value.
 * @param array $form_state
 *   The state of the form.
 *
 * @return string
 *   The value to be returned.
 */
function selenium_settings_form_default_value($name, $default_value, array &$form_state) {
  return isset($form_state['values'][$name]) ? $form_state['values'][$name] : variable_get($name, $default_value);
}

/**
 * Checks to see if a browser executable is in $PATH and can be executed.
 *
 * @param string $browser
 *   The name of the executable to check for.
 *
 * @return bool
 *   Whether or not the given browser can be executed.
 */
function selenium_check_browser_status($browser) {
  $path = exec("which $browser");
  return is_executable($path);
}
